#!/usr/bin/env stap++

@use nginx.lua
@use luajit

global bts, jitted

function process_event()
{
    if (@defined(@var("globalL", "$^exec_path"))) {
        mL = @var("globalL", "$^exec_path")

    } else {
        mL = ngx_lua_get_main_lua_vm()
    }

    if (mL == 0) {
        return 0
    }

    g = luajit_G(mL)
    if (g == 0) {
        return 0
    }

    L = luajit_cur_thread(g)
    if (L == 0) {
        return 0
    }

    vmstate = luajit_vm_state(g)
    if (vmstate >= 0) {
        /* compiled Lua code */

        jitted++

%( "$^arg_nojit :default()" != ""  %?
        return 0;
%)
    } else {
%( "$^arg_nointerp :default()" != ""  %?
        return 0
%)
    }

    bt = luajit_backtrace(L, g, $^arg_detailed :default(0) ? 0 : 1)
    if (bt != "") {
        f = probefunc()
        if (f != "") {
            bt = f . "\n" . bt
        }
        //printf("backtrace: %s\n", bt)
        bts[bt] <<< 1
        return 1
    }

    return 0
}

probe $^arg_probe :default(timer.profile)
{
    if (pid() == target()) {
        process_event()
    }
}

function output_report() {
    foreach (bt in bts- limit $^arg_limit :default(1000)) {
        cnt = @count(bts[bt])
        if (cnt <= $^arg_min :default(2)) {
            break
        }
        printf("%s\t%d\n", bt, cnt)
    }
}

%( "$^arg_time :default()" != ""  %?
probe timer.s($^arg_time)
{
    warn("Time's up. Quitting now...\n")
    exit()
}
%)

probe end {
    output_report()
    warn(sprintf("Found %d JITted samples.\n", jitted))
}

probe begin
{
    warn(sprintf("Start tracing %d ($^exec_path)\n", target()))
    %( "$^arg_time" != ""  %?
    warn(sprintf("Please wait for $^arg_time seconds...\n"))
    %:
    warn("Hit Ctrl-C to end.\n")
    %)
}

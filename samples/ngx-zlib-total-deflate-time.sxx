#!/usr/bin/env stap++

/*
 * Copyright (C) Yichun Zhang (agentzh)
 */

global active_reqs
global active_req
global exec_begin
global exec_elapsed
global stats

probe @pfunc(ngx_http_process_request)
{
    active_reqs[$r] = 1
}

probe @pfunc(ngx_http_gzip_body_filter)
{
    r = $r
    if (active_reqs[r]) {
        active_req = r

    } else {
        active_req = 0
    }
}

probe @pfunc(deflate)!,
      process("$^libz_path").function("deflate")
{
    //warn("HERE")
    if (active_req) {
        exec_begin = gettimeofday_us()
    }
}

probe @pfunc(deflate).return!,
      process("$^libz_path").function("deflate").return
{
    if (exec_begin) {
        exec_elapsed[active_req] += gettimeofday_us() - exec_begin
        exec_begin = 0
    }
    active_req = 0
}

probe @pfunc(ngx_http_free_request)
{
    r = $r
    elapsed = exec_elapsed[r]
    if (elapsed) {
        stats <<< elapsed
    }
    delete exec_elapsed[r]
    delete active_reqs[r]
    exec_begin = 0
}

probe begin {
    printf("Start tracing process %d ($^exec_path)...\n", target())
    %( "$^arg_time :default()" != ""  %?
    printf("Please wait for $^arg_time seconds...\n")
    %:
    printf("Hit Ctrl-C to end.\n")
    %)
}

%( "$^arg_time" != ""  %?
probe timer.s($^arg_time) {
    exit()
}
%)

probe end {
    count = @count(stats)
    if (count == 0) {
        printf("\nNo samples found so far.\n")

    } else {
        printf("\nDistribution of zlib deflate time (accumulated in each request, in microseconds) for %d samples:\n",
               count)
        printf("(min/avg/max: %d/%d/%d)\n", @min(stats), @avg(stats),
               @max(stats))
        print(@hist_log(stats))
    }
}

#!/usr/bin/env stap++

/*
 * Copyright (C) Yichun Zhang (agentzh)
 */

global resp_sizes
global stats

probe @pfunc(ngx_http_charset_body_filter)!,
      @pfunc(ngx_http_postpone_filter)!,
      @pfunc(ngx_http_gzip_body_filter)!,
      @pfunc(ngx_http_chunked_body_filter)
{
    r = $r
    if (r == $r->main && $in) {
        size = 0
        $*cl := @cast(cl, "ngx_chain_t")
        for (cl = $in; cl; cl = $*cl->next) {
            b = $*cl->buf
            $*b := @cast(b, "ngx_buf_t")
            size += $*b->last - $*b->pos
        }
        resp_sizes[r] += size
    }
}

probe @pfunc(ngx_http_free_request)
{
    r = $r
    if (r == $r->main) {
        stats <<< resp_sizes[r]
        delete resp_sizes[r]
    }
}

probe begin {
    printf("Start tracing process %d ($^exec_path)...\n", target())
    %( "$^arg_time :default()" != ""  %?
    printf("Please wait for $^arg_time seconds...\n")
    %:
    printf("Hit Ctrl-C to end.\n")
    %)
}

%( "$^arg_time" != ""  %?
probe timer.s($^arg_time) {
    exit()
}
%)

probe end {
    count = @count(stats)
    if (count == 0) {
        printf("\nNo samples found so far.\n")

    } else {
        printf("\nDistribution of original response body sizes (in bytes) for %d samples:\n",
               count)
        printf("(min/avg/max: %d/%d/%d)\n", @min(stats), @avg(stats),
               @max(stats))
        print(@hist_log(stats))
    }
}

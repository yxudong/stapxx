#!/usr/bin/env stap++

/*
 * Copyright (C) Yichun Zhang (agentzh)
 */

global active_reqs
global exec_begin
global exec_elapsed
global stats
global filter_begin

probe @pfunc(ngx_http_lua_ssl_cert_by_chunk)?,
      @pfunc(ngx_http_process_request)
{
    active_reqs[$r] = 1
}

probe @pfunc(ngx_http_lua_run_thread),
      @pfunc(ngx_http_lua_log_handler),
      @pfunc(ngx_http_lua_set_by_chunk),
      @pfunc(ngx_http_lua_header_filter_by_chunk),
      @pfunc(ngx_http_lua_body_filter_by_chunk)
{
    if (active_reqs[$r]) {
        exec_begin = gettimeofday_us()
    }
}

probe @pfunc(ngx_output_chain)
{
    if (exec_begin) {
        filter_begin = gettimeofday_us()
    }
}

probe @pfunc(ngx_output_chain).return
{
    if (exec_begin && filter_begin) {
        exec_begin += gettimeofday_us() - filter_begin
        //printf("filter runs in %dus\n", gettimeofday_us() - filter_begin)
    }
}

probe @pfunc(ngx_http_lua_run_thread).return,
      @pfunc(ngx_http_lua_log_handler).return,
      @pfunc(ngx_http_lua_set_by_chunk).return,
      @pfunc(ngx_http_lua_header_filter_by_chunk).return,
      @pfunc(ngx_http_lua_body_filter_by_chunk).return
{
    if (exec_begin) {
        exec_elapsed[$r] += gettimeofday_us() - exec_begin
        exec_begin = 0
    }
}

probe @pfunc(ngx_http_free_request),
      @pfunc(ngx_http_lua_free_fake_request)
{
    r = $r
    elapsed = exec_elapsed[r]
    if (elapsed) {
%( "$^arg_max :default()" != ""  %?
        if (elapsed <= $^arg_max) {
            stats <<< elapsed
        }
%:
        stats <<< elapsed
%)
    }
    delete exec_elapsed[r]
    delete active_reqs[r]
    exec_begin = 0
}

probe begin {
    printf("Start tracing process %d ($^exec_path)...\n", target())
    %( "$^arg_time :default()" != ""  %?
    printf("Please wait for $^arg_time seconds...\n")
    %:
    printf("Hit Ctrl-C to end.\n")
    %)
}

%( "$^arg_time" != ""  %?
probe timer.s($^arg_time) {
    exit()
}
%)

probe end {
    count = @count(stats)
    if (count == 0) {
        printf("\nNo samples found so far.\n")

    } else {
        printf("\nDistribution of Lua code pure execution time (accumulated in each request, in microseconds) for %d samples:\n",
               count)
        printf("(min/avg/max: %d/%d/%d)\n", @min(stats), @avg(stats),
               @max(stats))
        print(@hist_log(stats))
    }
}

#!/usr/bin/env stap++

# Copyright (C) Yichun Zhang

global stats, alloc, active

probe @pfunc(ngx_http_free_request).callee("ngx_destroy_pool")
{
    pool = $pool
    //printf("free req pool %p\n", pool)
    if (active[pool]) {
        stats <<< @count(alloc[pool])
        delete alloc[pool]
        delete active[pool]
    }
}

probe @pfunc(ngx_http_create_request).return
{
    r = $return
    $*r := @cast(r, "ngx_http_request_t")
    pool = $*r->pool
    if (pool) {
        //printf("create req pool %p\n", pool);
        active[pool] = 1
        alloc[pool] <<< 1
    }
}

probe @pfunc(ngx_palloc)
{
    pool = $pool
    //printf("palloc %p\n", pool)
    $*pool := @cast(pool, "ngx_pool_t")

    if (active[pool]) {
%( "$^arg_gross :default()" != ""  %?
        alloc[pool] <<< 1
%:
        sz = $size
        found = 0
        if (sz < $*pool->max) {
            pool = $*pool->current
            while (pool) {
                /* we omit ptr alignment here */
                if ($*pool->d->end - $*pool->d->last >= sz) {
                    found = 1
                    break
                }

                pool = $*pool->d->next
            }
        } else {
            //printf("large block: %d\n", sz)
        }

        //printf("alloc: sz:%d, found:%d\n", sz, found)

        if (!found) {
            //printf("HIT\n")
            alloc[pool] <<< 1
        }
%)
    }
}

probe end {
    count = @count(stats)
    if (count == 0) {
        printf("\nNo samples found so far.\n")

    } else {
%( "$^arg_gross :default()" != ""  %?
        tag = "gross"
%:
        tag = "true"
%)

        printf("\nDistribution of number of %s allocations in nginx request pool for %d req samples:\n",
               tag, count)
        printf("(min/avg/max: %d/%d/%d)\n", @min(stats), @avg(stats),
               @max(stats))
        print(@hist_log(stats))
    }
}

probe begin {
    printf("Start tracing process %d ($^exec_path)...\n", target())
    %( "$^arg_time :default()" != ""  %?
    printf("Please wait for $^arg_time seconds...\n")
    %:
    printf("Hit Ctrl-C to end.\n")
    %)
}

%( "$^arg_time" != ""  %?
probe timer.s($^arg_time) {
    exit()
}
%)
